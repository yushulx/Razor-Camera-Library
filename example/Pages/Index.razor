@page "/"
@inject IJSRuntime JSRuntime
@using RazorCameraLibrary
@using RazorBarcodeLibrary
@using Camera = RazorCameraLibrary.Camera

<PageTitle>Index</PageTitle>

<div id="loading-indicator" class="loading-indicator" style="@(isLoading ? "display: flex;" : "display: none;")">
    <div class="spinner"></div>
</div>

<div class="container">
    <div>
        <button @onclick="GetCameras">Get Cameras</button>
        <select id="sources" @onchange="e => OnChange(e)">
            @foreach (var camera in cameras)
            {
                <option value="@camera.DeviceId">@camera.Label</option>
            }
        </select>
        <button @onclick="Capture">@buttonText</button>
    </div>

    <div id="videoview">
        <div id="videoContainer"></div>
        <canvas id="overlay" class="overlay"></canvas>
    </div>
</div>

@code {
    private bool isLoading = false;
    private List<Camera> cameras = new List<Camera>();
    private CameraJsInterop? cameraJsInterop;
    private CameraEnhancer? cameraEnhancer;
    private BarcodeReader? reader;
    private BarcodeJsInterop? barcodeJsInterop;
    private string selectedValue = string.Empty;
    private bool _isCapturing = false;
    private string buttonText = "Start";

    private async Task OnChange(ChangeEventArgs e)
    {
        if (cameraEnhancer != null)
        {
            await cameraEnhancer.CloseCamera();

            selectedValue = e.Value.ToString();

            await OpenCamera();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cameraJsInterop = new CameraJsInterop(JSRuntime);
        await cameraJsInterop.LoadJS();

        cameraEnhancer = await cameraJsInterop.CreateCameraEnhancer();
        await cameraEnhancer.SetVideoElement("videoContainer");
    }

    public async Task GetCameras()
    {
        if (cameraEnhancer == null) return;
        try
        {
            cameras = await cameraEnhancer.GetCameras();
            if (cameras.Count >= 0)
            {
                selectedValue = cameras[0].DeviceId;
                await OpenCamera();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task OpenCamera()
    {
        if (cameraEnhancer == null) return;
        try
        {
            int selectedIndex = cameras.FindIndex(camera => camera.DeviceId == selectedValue);
            await cameraEnhancer.SetResolution(640, 480);
            await cameraEnhancer.OpenCamera(cameras[selectedIndex]);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task Capture()
    {
        if (barcodeJsInterop == null || reader == null)
        {
            isLoading = true;
            barcodeJsInterop = new BarcodeJsInterop(JSRuntime);
            await barcodeJsInterop.LoadJS();

            reader = await barcodeJsInterop.CreateBarcodeReader();
            isLoading = false;
        }

        if (cameraEnhancer == null) return;

        if (!_isCapturing)
        {
            buttonText = "Stop";
            _isCapturing = true;
            _ = WorkLoop();
        }
        else
        {
            buttonText = "Start";
            _isCapturing = false;
        }
    }

    private async Task WorkLoop()
    {
        List<BarcodeResult> results = new List<BarcodeResult>();
        if (barcodeJsInterop == null || cameraEnhancer == null || reader == null) return;

        while (_isCapturing)
        {
            try
            {
                IJSObjectReference canvas = await cameraEnhancer.AcquireCameraFrame();
                results = await reader.DecodeCanvas(canvas);
                await barcodeJsInterop.DrawCanvas("overlay", reader.SourceWidth, reader.SourceHeight, results);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            // await InvokeAsync(StateHasChanged);
        }

        results.Clear();
        await barcodeJsInterop.DrawCanvas("overlay", reader.SourceWidth, reader.SourceHeight, results);
    }
}
